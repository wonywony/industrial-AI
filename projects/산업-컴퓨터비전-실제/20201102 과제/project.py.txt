#!/usr/bin/env python
import cv2 
import numpy as np 
import math
import matplotlib.pyplot as plt 

def histogram_equilization(image):
	enhanced_image = cv2.equalizeHist(image)
	cv2.imshow("histogram equilization", enhanced_image)
	return enhanced_image

def canny_edge_detector(image): 
	
	# Convert the image color to grayscale 
	gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY) 

	# Use histogram equilization
	enhanced_grey = histogram_equilization(gray_image)
	
	# Reduce noise from the image 
	blur = cv2.GaussianBlur(enhanced_grey, (9, 9), 0) 
	canny = cv2.Canny(blur, 50, 170) 
	return canny 

def region_of_interest(image): 
	height = image.shape[0] 
	polygons = np.array([ 
		[(150, height), (850, height), (550, 250)] 
		]) 
	mask = np.zeros_like(image) 
	
	# Fill poly-function deals with multiple polygon 
	cv2.fillPoly(mask, polygons, 255)
	# cv2.imshow("mask", mask)
	# Bitwise operation between canny image and mask image 
	masked_image = cv2.bitwise_and(image, mask) 
	return masked_image 

def create_coordinates(image, line_parameters): 
	# print('line:', line_parameters)
	slope, intercept = line_parameters 
	y1 = image.shape[0]
	y2 = image.shape[0]/2 + 100
	x1 = int((y1 - intercept) / slope) 
	x2 = int((y2 - intercept) / slope) 
	return np.array([x1, y1, x2, y2]) 

def average_slope_intercept(image, lines): 
	left_fit = [] 
	right_fit = [] 
	for line in lines: 
		x1, y1, x2, y2 = line.reshape(4) 
		
		# It will fit the polynomial and the intercept and slope 
		parameters = np.polyfit((x1, x2), (y1, y2), 1) 
		slope = parameters[0] 
		intercept = parameters[1] 
		if slope < 0: 
			left_fit.append((slope, intercept)) 
		else: 
			right_fit.append((slope, intercept)) 
			
	left_fit_average = np.average(left_fit, axis = 0) 
	right_fit_average = np.average(right_fit, axis = 0) 
	print('left:', left_fit_average, 'right', right_fit_average)
	left_line = create_coordinates(image, left_fit_average) 
	right_line = create_coordinates(image, right_fit_average) 
	return np.array([left_line, right_line]) 

def display_lines(image, lines): 
	line_image = np.zeros_like(image) 
	if lines is not None: 
		for x1, y1, x2, y2 in lines: 
			cv2.line(line_image, (x1, y1), (x2, y2), (0, 255, 0), 10) 
	return line_image 

# Path of dataset directory 
cap = cv2.VideoCapture("test1.mp4") 
while(cap.isOpened()): 
	_, frame = cap.read() 
	canny_image = canny_edge_detector(frame) 
	cropped_image = region_of_interest(canny_image)
	
	lines = cv2.HoughLinesP(cropped_image, 2, np.pi / 180, 100, 
							np.array([]), minLineLength = 40, 
							maxLineGap = 5) 

	averaged_lines = average_slope_intercept(frame, lines) 
	line_image = display_lines(frame, averaged_lines) 
	combo_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1) 
	cv2.imshow("results", combo_image) 
	
	# When the below two will be true and will press the 'q' on 
	# our keyboard, we will break out from the loop 
	
	# # wait 0 will wait for infinitely between each frames. 
	# 1ms will wait for the specified time only between each frames 
	if cv2.waitKey(0) & 0xFF == ord('q'):	 
		break

# close the video file 
cap.release() 

# destroy all the windows that is currently on 
cv2.destroyAllWindows() 


